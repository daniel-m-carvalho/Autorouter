/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package pt.isel

import pt.isel.autorouter.*
import pt.isel.autorouter.autorouterReflect
import kotlin.jvm.optionals.toList
import kotlin.test.Test
import kotlin.test.assertContentEquals
import kotlin.test.assertEquals

class AutoRouterTestForClassroom {

    @Test fun get_students_via_reflection() {
        get_students(
            ClassroomController().autorouterReflect().toList()
        )
    }

    @Test fun get_students_via_dynamic() {
        get_students(
            ClassroomController().autorouterDynamic().toList()
        )
    }

    fun get_students(routes: List<ArHttpRoute>) {
        val r = routes.first { it.path == "/classroom/{classroom}" }
        val res = r.handler.handle(
            mapOf("classroom" to "i42d"),
            emptyMap(),
            emptyMap())
        assertContentEquals(

            listOf(
                Student(9876, "Ole Super", 7, 5),
                Student(4536, "Isel Maior", 7, 5),
                Student(5689, "Ever Sad", 7, 3),
            ),
            res.get() as List<Student>)
    }

    @Test fun get_students_with_name_containing_word_via_reflection() {
        get_students_with_name_containing_word(
            ClassroomController().autorouterReflect().toList()
        )
    }

    @Test fun get_students_with_name_containing_word_via_dynamic() {
        get_students_with_name_containing_word(
            ClassroomController().autorouterDynamic().toList()
        )
    }


    fun get_students_with_name_containing_word(routes: List<ArHttpRoute>) {
        val r = routes.first { it.path == "/classroom/{classroom}" }
        val res = r.handler.handle(
            mapOf("classroom" to "i42d"),
            mapOf("student" to "maior"),
            emptyMap())
        assertContentEquals(
            listOf(Student(4536, "Isel Maior", 7, 5)),
            res.get() as List<Student>)
    }

    @Test fun add_student_via_reflection() {
        add_student(
            ClassroomController().autorouterReflect().toList()
        )
    }
    @Test fun add_student_via_dynamic() {
        add_student(
            ClassroomController().autorouterDynamic().toList()
        )
    }

    fun add_student(routes: List<ArHttpRoute>) {
        //println("Routes: $routes")
        val r = routes.firstOrNull { it.path == "classroom/{classroom}/students/{nr}" &&
                it.method == ArVerb.PUT}
            ?: throw NoSuchElementException("No matching route found")
        val res = r.handler.handle(
            mapOf("classroom" to "i42d", "nr" to "9999"),
            emptyMap(),
            mapOf("nr" to "9999", "name" to  "Anibal Nobre", "group" to "11", "semester" to "3"))

        assertEquals(
            Student(9999, "Anibal Nobre", 11, 3),
            res.get() as Student)
    }

    @Test
    fun delete_student_via_reflection() {
        delete_student(
            ClassroomController().autorouterReflect().toList()
        )
    }
    @Test
    fun delete_student_via_dynamic() {
        delete_student(
            ClassroomController().autorouterDynamic().toList()
        )
    }

    fun delete_student(routes: List<ArHttpRoute>) {
        val r = routes.first { it.path == "/classroom/{classroom}/students/{nr}" && it.method == ArVerb.DELETE}
        val res = r.handler.handle(
            mapOf("classroom" to "i41d", "nr" to "4862"),
            emptyMap(),
            emptyMap())
        assertEquals(
            Student(4862, "Bainha Balizas", 65, 4),
            res.get() as Student)
    }
}
